gravity = "center",
location = "+0+0",
text
)
meme <- image_composite(img, text_properties, offset = "+0+50")
image_write(meme, path = output_path)
}
# Enter code here
library(magick)
generate_meme <- function(text, image_path, output_path) {
img <- image_read(image_path)
text_properties <- image_text(
color = "white",
size = 50,
font = "Arial-Bold",
gravity = "center",
location = "+0+0",
text
)
meme <- image_composite(img, text_properties, offset = "+0+50")
image_write(meme, path = output_path)
}
# Enter code here
library(magick)
generate_meme <- function(text, image_path, output_path) {
img <- image_read(image_path)
text_properties <- image_text(
color = "white",
size = 50,
font = "Arial-Bold",
gravity = "center",
location = "+0+0",
text
)
meme <- image_composite(img, text_properties, offset = "+0+50")
image_write(meme, path = output_path)
}
generate_meme(
text = "when i need to code",
image_path = "C:\Users\angel\Downloads\crying meme.jpg",
# Enter code here
library(magick)
generate_meme <- function(text, image_path, output_path) {
img <- image_read(image_path)
text_properties <- image_text(
color = "white",
size = 50,
font = "Arial-Bold",
gravity = "center",
location = "+0+0",
text
)
meme <- image_composite(img, text_properties, offset = "+0+50")
image_write(meme, path = output_path)
}
generate_meme(
text = "when i need to code",
image_path = "C:/Users/angel/Downloads/crying meme.jpg",
output_path = "C:/Users/angel/Downloads"
)
# Enter code here
library(magick)
generate_meme <- function(text, image_path, output_path) {
img <- image_read("C:/Users/angel/Downloads/crying meme.jpg")
text_properties <- image_text(
color = "white",
size = 50,
font = "Arial-Bold",
gravity = "center",
location = "+0+0",
text = "when i need to code"
)
meme <- image_composite(img, text_properties, offset = "+0+50")
image_write(meme, path = output_path)
}
generate_meme(
text = "when i need to code",
image_path = "C:/Users/angel/Downloads/crying meme.jpg",
output_path = "C:/Users/angel/Downloads"
)
# Enter code here
library(magick)
generate_meme <- function(text, image_path, output_path) {
img <- image_read("C:/Users/angel/Downloads/crying meme.jpg")
meme <- image_draw(img,
draw = text(
x = 100,
y = 100,
label = text,
font = "Arial-Bold",
size = 50,
color = "white",
gravity = "center"))
)
# Enter code here
library(magick)
generate_meme <- function(text, image_path, output_path) {
img <- image_read("C:/Users/angel/Downloads/crying meme.jpg")
meme <- image_draw(img,
draw = text(
x = 100,
y = 100,
label = text,
font = "Arial-Bold",
size = 50,
color = "white",
gravity = "center")
)
meme <- image_composite(img, text_properties, offset = "+0+50")
image_write(meme, path = output_path)
}
generate_meme(
text = "when i need to code",
image_path = "C:/Users/angel/Downloads/crying meme.jpg",
output_path = "C:/Users/angel/Downloads"
)
# Enter code here
library(magick)
generate_meme <- function(text, image_path, output_path) {
img <- image_read("C:/Users/angel/Downloads/crying meme.jpg")
meme <- image_draw(img,
draw = text(
label = "when i need to code",
font = "Arial-Bold",
size = 50,
color = "white",
gravity = "center")
)
meme <- image_composite(img, text_properties, offset = "+0+50")
image_write(meme, path = output_path)
}
generate_meme(
text = "when i need to code",
image_path = "C:/Users/angel/Downloads/crying meme.jpg",
output_path = "C:/Users/angel/Downloads"
)
# Enter code here
library(magick)
generate_meme <- function(text, image_path, output_path) {
img <- image_read("C:/Users/angel/Downloads/crying meme.jpg")
meme <- image_draw(img,
draw = text(
x
label = "when i need to code",
# Enter code here
library(magick)
generate_meme <- function(text, image_path, output_path) {
img <- image_read("C:/Users/angel/Downloads/crying meme.jpg")
meme <- image_draw(img,
draw = text(
x=100
label = "when i need to code",
# Enter code here
library(magick)
generate_meme <- function(text, image_path, output_path) {
img <- image_read(image_path)
text_properties <- image_text(
color = "white",
size = 50,
font = "Arial-Bold",
gravity = "center",
location = "+0+0",
text
)
meme <- image_composite(img, text_properties, offset = "+0+50")
image_write(meme, path = output_path)
}
# Enter code here
library(magick)
generate_meme <- function(text, image_path, output_path) {
img <- image_read(image_path)
text_properties <- image_text(
color = "white",
size = 50,
font = "Arial-Bold",
gravity = "center",
location = "+0+0",
text
)
meme <- image_composite(img, text_properties, offset = "+0+50")
image_write(meme, path = output_path)
}
generate_meme(
text = "when i need to code",
image_path = "C:/Users/angel/Downloads/crying meme.jpg"
)
# Enter code here
library(magick)
generate_meme <- function(text, image_path, output_path) {
img <- image_read(image_path)
meme <- image_annotate(img,
text,
size = 50,
color = "white",
gravity = "center",
location = "+0+50")
meme <- image_composite(img, text_properties, offset = "+0+50")
image_write(meme, path = output_path)
}
generate_meme(
text = "when i need to code",
image_path = "C:/Users/angel/Downloads/crying meme.jpg"
)
# Enter code here
library(magick)
generate_meme <- function(text, image_path, output_path) {
img <- image_read(image_path)
meme <- image_annotate(img,
text,
size = 50,
color = "white",
gravity = "center",
location = "+0+50")
meme <- image_composite(img, offset = "+0+50")
image_write(meme, path = output_path)
}
generate_meme(
text = "when i need to code",
image_path = "C:/Users/angel/Downloads/crying meme.jpg"
)
# Enter code here
library(magick)
generate_meme <- function(text, image_path, output_path) {
img <- image_read(image_path)
meme <- image_annotate(img,
text,
size = 50,
color = "white",
gravity = "center",
location = "+0+50")
meme <- composite_image(img, offset = "+0+50")
image_write(meme, path = output_path)
}
generate_meme(
text = "when i need to code",
image_path = "C:/Users/angel/Downloads/crying meme.jpg"
)
# Enter code here
library(magick)
generate_meme <- function(text, image_path, output_path) {
img <- image_read(image_path)
meme <- image_annotate(img,
text,
size = 50,
color = "white",
gravity = "center",
location = "+0+50")
meme <- image_composite(img, offset = "+0+50")
image_write(meme, path = output_path)
}
generate_meme(
text = "when i need to code",
image_path = "C:/Users/angel/Downloads/crying meme.jpg"
)
# Enter code here
library(magick)
generate_meme <- function(text, image_path, output_path) {
img <- image_read(image_path)
meme <- image_annotate(img,
text,
size = 50,
color = "white",
gravity = "center",
location = "+0+50")
meme <- image_composite(img, image_annotate, offset = "+0+50")
image_write(meme, path = output_path)
}
generate_meme(
text = "when i need to code",
image_path = "C:/Users/angel/Downloads/crying meme.jpg"
)
# Enter code here
library(magick)
generate_meme <- function(text, image_path, output_path) {
img <- image_read(image_path)
meme <- image_annotate(img,
text,
size = 50,
color = "white",
gravity = "center",
location = "+0+50")
meme <- image_composite(img, image_annotate(), offset = "+0+50")
image_write(meme, path = output_path)
}
generate_meme(
text = "when i need to code",
image_path = "C:/Users/angel/Downloads/crying meme.jpg"
)
# Enter code here
library(magick)
generate_meme <- function(text, image_path, output_path) {
img <- image_read(image_path)
meme <- image_annotate(img,
text,
size = 50,
color = "white",
gravity = "center",
location = "+0+50")
meme <- image_composite(img, image_annotate(meme), offset = "+0+50")
image_write(meme, path = output_path)
}
generate_meme(
text = "when i need to code",
image_path = "C:/Users/angel/Downloads/crying meme.jpg"
)
# Enter code here
library(magick)
generate_meme <- function(text, output_path) {
image_path <- "C:/Users/angel/Downloads/crying meme.jpg
meme <- image_read(image_path)
meme <- image_annotate(
meme
text = text
size = 50
color = white"
gravity = "center"
location = "+0+50"
font = "arial"
image_write(meme, path = output_path)
print(paste("meme", output_path))
}
text_to_overlay <- "when i need to code"
output_path <- "outputmeme.jpg"
generate_meme(text_to_overlay, output_path)
# Enter code here
library(magick)
generate_meme <- function(text, output_path) {
image_path <- "C:/Users/angel/Downloads/crying meme.jpg"
meme <- image_read(image_path)
meme <- image_annotate(
meme
text = text
# Enter code here
library(magick)
generate_meme <- function(text, output_path) {
image_path <- "C:/Users/angel/Downloads/crying meme.jpg"
meme <- image_read(image_path)
meme <- image_annotate(
meme,
text = text,
size = 50,
color = "white",
gravity = "center",
location = "+0+50",
font = "arial")
image_write(meme, path = output_path)
print(paste("meme", output_path))
}
text_to_overlay <- "when i need to code"
output_path <- "outputmeme.jpg"
generate_meme(text_to_overlay, output_path)
# Enter code here
install.packages("magick") library(magick)  generate_meme <- function(text, output_path) {   image_path <- "/Users/zixinwong/Downloads/crying.jpg"   meme <- image_read(image_path)    meme <- image_annotate(     meme,     text = text,     color = "red",     size = 40,     location = "+10+10",      font = "Comic Sans"   )      image_write(meme, path = output_path)      print(paste("Meme generated and saved to:", output_path)) }  text_to_overlay <- "When your code does not work..." output_image_path <- "output_meme.jpg"   generate_meme(text_to_overlay, output_image_path)
# Enter code here
library(magick)
generate_meme <- function(text, output_path) {
image_path <- "C:/Users/angel/Downloads/crying meme.jpg"
meme <- image_read(image_path)
meme <- image_annotate(
meme,
text = text,
color = "red",
size = 40,
location = "+10+10",
font = "Comic Sans"
)
image_write(meme, path = output_path)
print(paste("Meme generated and saved to:", output_path))
}
text_to_overlay <- "When you need to code for 2207..."
output_image_path <- "output_meme.jpg"
generate_meme(text_to_overlay, output_image_path)
# Enter code here
text_analysis_game <- function() {
# Get user input
user_input <- readline(prompt = "Enter a sentence: ")
# Calculate statistics
num_words <- length(strsplit(user_input, "\\s")[[1]])
num_chars <- nchar(user_input)
avg_word_length <- num_chars / num_words
if (any(is.na(num_chars)) || any(is.na(num_words))) {
stop("num_chars or num_words contains missing values.")
}
# Determine communication skill level
if (avg_word_length <= 3) {
skill_level <- "Beginner Communicator"
} else if (avg_word_length <= 5) {
skill_level <- "Intermediate Communicator"
} else {
skill_level <- "Advanced Communicator"
}
# Print statistics and skill level
cat("\nStatistics:\n")
cat(paste("Number of words:", num_words), "\n")
cat(paste("Number of characters:", num_chars), "\n")
cat(paste("Average word length:", round(avg_word_length, 2)), "\n\n")
cat(paste("Your communication skill level:", skill_level), "\n")
}
# Run the game
text_analysis_game()
# Enter code here
text_analysis_game <- function() {
user_input <- readline(prompt = "Enter a sentence: ")
num_words <- length(strsplit(user_input, "\\s")[[1]])
num_chars <- nchar(user_input)
if(num_words == 0) {
cat("Error: Please enter a non-empty sentence.\n")
return(NULL)
}
avg_word_length <- num_chars / num_words
if (!is.finite(avg_word_length)) {
cat("Error: Something went wrong with the calculation.\n")
return(NULL)
}
if (avg_word_length <= 3) {
skill_level <- "Beginner Communicator"
} else if (avg_word_length <= 5) {
skill_level <- "Intermediate Communicator"
} else {
skill_level <- "Advanced Communicator"
}
cat("\nStatistics:\n")
cat(paste("Number of words:", num_words), "\n")
cat(paste("Number of characters:", num_chars), "\n")
cat(paste("Average word length:", round(avg_word_length, 2)), "\n\n")
cat(paste("Your communication skill level:", skill_level), "\n")
return(list(num_words = num_words, num_chars = num_chars, avg_word_length = avg_word_length, skill_level = skill_level))
}
result <- text_analysis_game()
knitr::opts_chunk$set(echo = TRUE)
# Enter code here
for (x in c(3,6,9)){
print(x)
}
# Left-hand side code: for loop for passing values
for (value in list_of_values)
{do something (based on value)}
# Left-hand side code: for loop for passing values
for (value in list_of_values)
{do something (based on value)}
# Left-hand side code: for loop for passing values
for (x in 1:8){print(x)}
# Right-hand side code: for loop for passing indices
for (x in 1:8)
{y <- seq(from=100, to=200, by=5)
print(y[x])
}
# Enter code here
sample_sizes <- c(5,10,15,20,25000)
sample_means <- double(length(sample_sizes))
for(i in seq_along(sample_sizes)){
sample_means[i] <- mean(rnorm(sample_sizes[i]))
}
sample_means
# Example 3 for data_type=double
sample_means<- vector("double", length = 5)
sample_means <- double (5)
sample_means <- rep(0, length(sample_sizes))
# Example 3 for data_type=double
sample_means <- rep(0, length(sample_sizes))
# Initialisation of data_list
data_list <- vector("list", length=5)
# Example: bad idea!
a <- 7:11
b<-8:12
out <- rep(0L,5)
for (i in seq_along(a)) {
out[i]<- a[i] +b[i]
}
out
# Taking advantage of vectorization
a <-7:11
b <- 8:12
out <- a+b
out
# Slide 23
sample_sizes<- c(5,10,15,20,25000)
sample_summary <- function(sample_sizes, fun){
out <- vector("double",length(sample_sizes)){
# Slide 23
sample_sizes<- c(5,10,15,20,25000)
sample_summary <- function(sample_sizes, fun){
out <- vector("double",length(sample_sizes))
for (i in seq_along(sample_sizes)) {
}{
# Slide 23
sample_sizes<- c(5,10,15,20,25000)
sample_summary <- function(sample_sizes, fun){
out <- vector("double",length(sample_sizes))
for (i in seq_along(sample_sizes)) {
out[i] <- fun(rnorm(sample_sizes[i]))
}
return(out)
}
# Slide 24
#Compute mean
sample_summary(sample_sizes,mean)
# Compute median
sample_summary(sample_sizes, median)
# Compute sd
sample_summary(sample_sizes,sd)
# Left-hand side code: for loop
for(i in 1:5){
print(i)
}
# Right-hand side code: while loop
i<-1
while (i <= 5){
print(i)
i<- i+1
}
setwd("~/NM2207/WEEK 6")
